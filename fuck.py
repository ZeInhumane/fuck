(lambda token, prefix, logger_lvl, pg_info: (lambda discord, Bot, warnings, asyncio, asyncpg, logging, json: [warnings.catch_warnings(), warnings.filterwarnings("ignore"), (lambda log, bot, pool: [log.setLevel(logger_lvl), log.info("Login as %s( %s)" % (bot.user.__str__(), bot.user.id.__str__())), setattr(bot, "on_ready", asyncio.coroutine(lambda: log.info("Ready!")) ), bot.command(name="ping")(asyncio.coroutine(lambda ctx: ctx.reply("pong! üèì", mention_author= False))), bot.run(token) ])(logging.getLogger('lol'), Bot(command_prefix=prefix, test_guilds=[ int(g["id"]) for g in json.loads(__import__("urllib3").PoolManager().request("GET", "https://discord.com/api/v10/users/@me/guilds", headers={"Authorization": "Bot "+ token}).data.decode('utf-8'))], intents= discord.Intents.all()), asyncpg.create_pool(**pg_info))])(__import__('discord'), __import__('discord.ext.commands').ext.commands.Bot, __import__('warnings'), __import__('asyncio'), __import__('asyncpg'), __import__('logging'), __import__("json")))("f", "!", "WARN", {'database':"hell", 'user':"root", 'password':"root", 'host':"127.0.0.1"})
